package me.diarye.presentation.view.entry

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.Button
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.viewmodel.compose.viewModel
import me.diarye.R
import me.diarye.helper.SpeechRecognizerManager
import me.diarye.presentation.model.DiaryEntry
import me.diarye.presentation.view.detail.DiaryViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun NewEntryScreen(
    onBack: () -> Unit,
    viewModel: EntryViewModel = hiltViewModel(),
) {
    val context = LocalContext.current
    var isRecording by remember { mutableStateOf(false) }
    var transcript by remember { mutableStateOf("") }

    // Remember manager and lifecycle
    val speechManager = remember {
        SpeechRecognizerManager(
            context = context,
            onResult = { result -> transcript = result },
            onError = { error -> transcript = "Error: $error" }
        )
    }

    DisposableEffect(Unit) {
        onDispose {
            speechManager.stopListening()
        }
    }

    Scaffold(topBar = {
        TopAppBar(title = { Text("New Entry") }, navigationIcon = {
            IconButton(onClick = onBack) {
                Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
            }
        })
    }) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(padding)
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            Text("Transcript:", style = MaterialTheme.typography.titleMedium)
            Text(transcript.ifEmpty { "No speech yet..." }, modifier = Modifier.padding(8.dp))

            IconButton(onClick = {
                if (isRecording) {
                    speechManager.stopListening()
                } else {
                    transcript = ""
                    speechManager.startListening()
                }
                isRecording = !isRecording
            }) {
                Icon(
                    if (isRecording) painterResource(R.drawable.stop) else painterResource(R.drawable.mic24),
                    contentDescription = null,
                    tint = if (isRecording) Color.Red else Color.Black,
                    modifier = Modifier.size(64.dp)
                )
            }

            Spacer(modifier = Modifier.height(16.dp))

            Button(
                onClick = {
                    viewModel.addNew(
                        DiaryEntry(
                            originalText = transcript,
                            summary = "Summary will be generated by AI"
                        )
                    )
                    onBack()
                },
                enabled = transcript.isNotEmpty()
            ) {
                Text("Save Entry")
            }
        }
    }
}


@Preview(showSystemUi = true)
@Composable
private fun Preview() {
    NewEntryScreen({})
}
